Javascript
------------
HTML - content of a webpage
CSS - for styling
Javascript - maintain the behaviour of a webpage

Types
-------
1. internal
	a. head or body
	b. <script></script>
	c. page level javascript
	
2. external
	a. head/body
	b. separate js file(needs to be included to html)
	c. Application level/project level

datatypes:
-----------
Types of data we are dealing with
  Primitive							Non-primitive/Complex
  1. number								1. function
  2. string								2. Object
  3. boolean(true,false)
  4. undefined(undefined)
  5. null
  
N.p - 'typeof' is used to check datatype of a value  
	 
null vs undefined
-------------------
1. when a variable is declared without a value, that variable by default will have	
   undefined value, a variable can be declared with a null value.
	var a; 			//a=undefined
	var b = null;  //b=null
2. null is assigned as a value to a variable, but undefined gets assigned to a variable 
	by default 
3. datatype of null is 'object' whereas datatype of undefined is 'undefined'

 
important methods in JS
-----------------------
window.alert()  -  window(Object), alert(Method)
console.log()   -  Console(object), log(method)
document.write() - document(object), write(method)


 
 var a = {}
 var b = [] 
 typeof a; //object
 typeof b; //object
 
 a instanceof Object; //true
 b instanceof Object; //true
 
 a instanceof Array; //false
 b instanceof Array; //true
 
 Variables
 ---------
Variables in Javascript can be declared by  using 
either one of the below 3 keywords 

 1. const
 2. var
 3. let


const
------
ECMASCRIPT-6(2015)
value cann't be changed
cann't be redeclared
has to be initialized 
hoisting is not supported
block scope (variables declared inside a block is visible only inside that block)

var
---
before Ecmascript-6
value can be changed
can be re-declared
need not be initialized
support variable hoisting 
function scope (variables declared inside a block are also visible inside method))

let
---
Ecmascript-6
value can be changed
cann't be re-declared
need not be initialized
doesnot support variable hoisting 
block scope (variables declared inside a block is visible only inside that block)

variable Hoisting:
------------------
-all variable declarations are moved to the top of the script/function.
-we can use a variable before it is declared. 
-only variable declaration is hoisted, variable value is not hoisted.
-variable hoisting is done only for 'var' variables not for let/const

console.log(a);
var a = 10;

var a;
console.log(a);
a = 10;

variable scope: 
---------------
3 scope
	1. global
	2. local/function
	3. block
	
global scope:
--------------
-global-variables declared outside function(inside js file/script)
-these are accesible/visible throughout the script

local/function:
---------------
-declared inside a function/function arguements
-can be used only inside that function

block scope:
------------
-declared inside a block
-visible only inside block

N.P- variables declared without var/let/const becomes global , even though
that variable is declared inside a function.

UseStrict
---------
-'usestrict' is usually written on the top of script.
-The purpose of "use strict" is to indicate that the code should be executed in "strict mode"
-when 'use strict' is not written, browser runs the JS in normal mode.
-when 'use strict' is  written, browser runs the JS in strict mode


1. variable declaration without var/let/const is not allowed
2. function with duplicate arguements are not allowed
3. NaN cann't be used as a variable name


Comments
--------
-it improves readability/understandability of a file
-single line comment  
// single line comment

-multi line comment 
/*
line-1
line-2
line-3
*/

Operators
---------
1. arithmetic (+,-,*,/,%,**) /quotient %remainder **exponent
2. Assignment (=,+=,-=)
3. Relational  (>,>=,<,<=,==,===,!=,!==)
4. logical (&&,||,!)
5. bitwise  (&,|,^,~)
6. increment/decrement (++,--)
7. miscelaneous (typeof,instanceof)

No of operands
---------------
1. unary (1 operand)
2. binary (2 operands)
3. ternary (3 operands) 
    
condition ? true : false   

N.P
---
== compares only the value
=== compares the value and datatype

pre-increment(++a)
post-increment(a++)

pre-decrement(--a)
post-decrement(a--)

Q. using ternary find the greatest number amongst 3 numbers

dialogue boxes/popup boxes
--------------------------
the below methods are from window object
1.  alert  (message + ok)
2.  confirm ( message + ok-true,cancel-false)
3.  prompt  (message + inputBox + ok-'' or 'entered msg' , cancel-null)


conditional statements
------------------------
1. if
2. if-else
3. switch

Loop
----
Loop helps to execute a block of statements/code number of times.

1. while
2. do-while
3. for

while
-----
initilization
while(condition)
{
  body;
  inc/dec;
}

var i = 2;
while(i<=20)
{
  document.write(i+"   ");
  i=i+2;
}

do-while  (body gets executed atleast 1 )
--------
initialization

do
{
  body;
  inc/dec;
}
while(cond);

var i=1;
do
{
  document.write("hrllo");
  i++;
}
while(i<=10);

--The problem with while and do-while is
  if body of the loop contains more statements we will not be able to 
  read all 3 things in a single glance
  
  1. initializaion
  2. condition
  3. increment/decrement

For
----
  for(initialization ; condition ; inc/dec)
  {
    body
  }
for(var i=1 ; i<=10 ; i++)
{
  
document.write(i+"   ");

}

Functions 
----------
1. pre-defined (alert,prompt,confirm,max,min)
	already written, we are just using them
2. user-defined
	we have to write, and we will use them
   
   a. function declaration
   b. function expression(anonymous)
   c. self invoked ( IIFE- Immediately Invoked Function Expression)

Fat Arrow Function(ES-6)

a. function add(a,b)
{
  console.log(a+b);
}
add(2,3);
b. var add = function(a,b)
{
  console.log(a+b);
}
add(3,4)

N.p- function hoisting is applicable for function declaration 
	 but not for function expression

c. (function(a,b)
{ 
  console.log(a+b);
})(3,2);


a. function with return
------------------------
   function add2(a,b)
{
  return a+b;
}
var result = add2(3,5);
console.log(result);

b. function with-out return
----------------------------
   function add(a,b)
{
  console.log(a+b);
}
add(2,3);

function add(a,b)
{
  console.log(a+b);
}
add(2,3,4);

function add(a,b)
{
  console.log(a+b);
}
add(2);


Arrow function(ES-5)
--------------
var add = (a,b)=>console.log(a+b);

add(2,6);

Number
------
parseInt();
parseFloat();


Math
----
Math.PI;
abs();
sqrt();
cbrt();
ceil();
floor();
max();
min();
pow();
random();


Strings
-------
1. literal
   var str1 = "sachin";
   typeof str1; //string

2. object
   var str2 = new String("sachin");    
   typeof str2;   //
   "object"

var a = "sachin";
var b = "sachin"
a == b;
 // true

var a = "sachin";
var b = new String("sachin")
a == b; //
true

var a = new String("sachin");
var b = new String("sachin");
a == b;  //
false

methods:


length;
toUpperCase();
toLowerCase();
charAt();
concat();
eval();
indexOf();
lastIndexOf();
includes();
replace();
slice(start, end)
substring(start, end)
substr(start, length)
split()
trim()

The difference is that substring() cannot accept negative indexes.


Array
-----
-to store multiple values/items with a single variable name.

var marks = [10,20,30,40,50];
var arr = new Array(5);

properties: length , delete

To add/remove elements:
	push(...items) – adds items to the end,
	pop() – extracts an item from the end,
	shift() – extracts an item from the beginning,
	unshift(...items) – adds items to the beginning.
	splice(pos, deleteCount, ...items) – at index pos delete deleteCount elements and insert items.
	slice(start, end) – creates a new array, copies elements from position start till end (not inclusive) into it.
	concat(...items) – returns a new array: copies all members of the current one and adds items to it. If any of items is an array, then its elements are taken.\
	
To search among elements:
	indexOf/lastIndexOf(item, pos) – look for item starting from position pos, return the index or -1 if not found.
	includes(value) – returns true if the array has value, otherwise false.
	find/filter(func) – filter elements through the function, return first/all values that make it return true.
	findIndex is like find, but returns the index instead of a value.
	
To transform the array:
	map(func) – creates a new array from results of calling func for every element.
	sort(func) – sorts the array in-place, then returns it.
	reverse() – reverses the array in-place, then returns it.
	split/join – convert a string to array and back.
	reduce(func, initial) – calculate a single value over the array by calling func for each element and passing an intermediate result between the calls.
	
To iterate over elements:
	– calls func for every element, does not return anything.
	
Additionally:
	Array.isArray(arr) checks arr for being an array.
	Array.from()  change array-like or iterable into true array
	Array.of()  create array from every arguments passed into it.

const nums = Array.of(1, 2, 3, 4, 5, 6);
console.log(nums);

const lis = document.querySelectorAll('li');
const lisArray = Array.from(document.querySelectorAll('li'));

// is true array?
console.log(Array.isArray(lis)); // output: false
console.log(Array.isArray(lisArray));  // output: true


function closure
*****************
- A closure is an inner function which has access to its own variable, outer function variable and global variables.
- A closure has access to its outer functions variables even after
  outer function execution is completed.

OOPS
------
class - structure/blueprint/template for creating Object
		class has only logical existance
		class doesn't have physical existance
		
object - every instance of a class
		 Object has physical existance

-a class in javascript is created using constructor function.
-class contains variables and methods.

Prototype
----------
- properties added to the prototype of a class gets available to 
  all the objects of that class

Inheritance
-----------
- Inheritance is the concept where one class inherits the properties
  from another class
- it is mainly used for code re-usability
- also called is-a relationship



Object
------


this
*****
-In the global context or inside a function this refers to the window object.
-Inside IIFE (immediate invoking function) if you use "use strict", value of this
 is undefined. To pass access window inside IIFE with "use strict", you have to 
pass this.
-While executing a function in the context of an object, the object becomes the
 value of this
-Inside a setTimeout function, the value of this is the window object.
-If you use a constructor (by using new keyword) to create an object, the value of 
this will refer to the newly created object.
-You can set the value of this to any arbitrary object by passing the object as the
 first parameter of bind, call or apply
-For dom event handler, value of this would be the element that fired the event

Event Handling
--------------
- onclick,ondblclick,onmouseover,onmouseout (Mouse)
- onkeypress , onkeydown, onkeyup  (Keyboard)
- onSubmit, onchange, onblur,onfocus  (Form)
- onload, onbeforeUnload , onunload (Document)

addEventListner
---------------
1. to add events to dynamically added elements
2. to add multiple events to an element

1. event Capturing (parent-->child)
2. event Bubbling  (child-->parent)

2. When an event happens on an element, it first runs the handlers on it, then on 
its parent, then all the way up on other ancestors/parents.
   stopPropagation()  / cancelBubble
   stopImmediatePropagation (Execute the first event handler, and stop the rest of 
the event handlers from being executed)

Date
*****


timeout/Interval
******************
-setTimeout allows to run a function once, after the interval of time.
-setInterval allows to run a function again  after the interval of time
setTimeout();
setInterval();
clearInterval();

DOM
---
1. getElementById();
2. getElementsByClassName()
3. getElementsByTagName()
4. getElementsByName()

1. querySelector()
2. querySelectorAll()


get value from inputBOx
--var x = document.getElementById('name').value

set value to an input box
--document.getElementById('name').value = "new value"


BOM- Browser Object Model
-------------------------

1. window - alert,prompt,confirm,open,close,print,setTimeout,setInterval
2. screen - 
	screen.width
	screen.height
	screen.availWidth

3. Location - window.location- 
   protocol,host,hostname,pathname,href
   refresh a page  - window.location.reload();
   open a new page - window.location.assign('url');

4. History - 
   back(),forward(),length(),go()

5. Navigator - 
  The window.navigator object contains information about the visitor's browser.
  navigator.appName
  navigator.appVersion
  navigator.appCodeName
  navigator.platform


Cookie vs Offlinestorage
-------------------------
1. cookie- stores data in browser memory
		   text data
           name=value pair

---store only limited data(4kb)
---not secure
---with every server request cookie data is sent to server 
---cookie data gets appended to the url and it will be sent

advantage-cookie data can be used @clientside(browser) and 
			@serverside(server)

get Cookie
-----------
var x = document.cookie

set Cookie
-----------
document.cookie = "userName='sachin'"

Remove Cookie
--------------
set the expires parameter to a passed date. 
-we can delete cookie by setting the cookie to an older date;

-document.cookie ="userName='sachin'; expires=sat, 01 sep 2018 00:00:00 UTC; "

2. offline storage- stores data in browser
					key-value pair

---can store up to 5 mb 
---data will not be sent in the URL
---secure
---data can be used only in browser(clientside)

  a. session storage (data gets lost when we close the tab)
	sessionstorage.setItem(k,v);
	value = sessionstorage.getItem(k);
	sessionStorage.removeItem(k);
	sessionStorage.clear();
	
  b. local storage (data remains there even after the tab/window is closed)
  
N.P - for sensitive information we should use session storage

store data in Session storage
----------------------------
sessionstorage.setItem(key,value);
OR
sessionstorage.key = value

get data from sessionstorage
----------------------------
var value = sessionStorage.get(key);
OR
var value = sessionStorage.key;

remove data from sessionstorage
--------------------------------
sessionStorage.removeItem(key);

remove all the items from sessionStorage
---------------------------------------
sessionStorage.clear();

Error Handling 23.04.2018
--------------------------


1. EvalError
2. RangeError
3. TypeError
4. SyntaxError
5. ReferenceError
6. URIError


when Exception occurs
1. exception object gets created and thrown
2. it is checked whether user handles that exception or not(try-catch)
3. if No, that exception object goes to Default exception handler
   default exception handler-prints exception information and 
   stops program execution
4. if yes, exception goes to developer written exception handling code


Terminologies
-------------
1. try- containes a block statements where exception might occur
2. catch - actual exception handling code, this will executed
	   only if exception is there in try
3. finally- contains the statements to be executed at any situation(important 
statements)
4. throw- to throw exception explicitely(user-defined exceptions)

N.p: - try block should be immediately followed by either a catch()
       or a finally{}


Form Validation
----------------
1. server side validation
2. client side validation (browser)

ex: inputBox is filled or not
     password format is matching or not


REGEX
------
REGEX - Regular Expression




















 
