1. download Nodejs
   https://nodejs.org/en/download/

2. check nodejs is installed?
   node -v

3. check if NPM is installed? (NPM-Node Package Manager)
   npm -v 

4. install angular CLI (Command Line Interface)
   npm install -g @angular/cli

5. check if angular CLI  is installed?
   ng v

6. create a new project
   ng new project-name

7. Run the project
   go the the project directory
   ng serve (project gets deployed to server)
   http://localhost:4200
   
ng serve command launches the server, watches your files, and rebuilds the app as you make changes to those files.

Using the --open (or just -o) option will automatically open your browser on http://localhost:4200/.

to Run in other port
	ng serve -port 5000


Node.js
-------
It is a platform where we can run JavaScript. Nodejs is made up of modules

1. To install 3rd party module as a Global Dependency (All the Node projects created in that system can use this module. Details wont be added in package.json)

npm install -g <Package Name>

Ex:
npm install -g rimraf
npm install -g typescript
npm install -g @angular/cli

2. To install 3rd party module as a Project Core Dependency (It can be used only the current projects. -S will add the details in package.json)

npm install -S <Package Name> (Install the package as core dependency in the current project. it is required in both production and developement)

Ex:
npm install -S connect  (it will be installed in the current project under node_modules folder. It will add an entry in package.json under depencies section)

npm uninstall -S connect (it will remove the package and entry from package.json)


3. To install 3rd party module as a Project Developer Dependency (It can be used only the current projects. -D will add the details in package.json)

npm install -D <Package Name> (Install the package as developer dependency in the current project. This package is not required in the production environment, it is required only in the developement environment)


Ex:
npm install -S chai  (it will be installed in the current project under node_modules folder. It will add an entry in package.json under devDepencies section)

npm uninstall -D chai (it will remove the package and entry from package.json)


Note : npm install   //This command will install all the packages from package.json


HTML5 Scaffolding using EMMET
-----------------------------

1.To create HTML5 Code Snippet

!

2. html>head>title{Angular 5}

3. html>head>title{Angular 5}^body>p{Angular 5}

4.  p{Para-$}*5

5. p{Para}+p#main{para with id}+p.sty{para with class}+p[data-company="Capgemini"]{Para with attribute}

6.  table>(tr>td{td-$}*3)*3

7. div#test{this is a div with id test}



To load the Modules in Angular using TypeScript

import {} from '<package>'


Main.ts (Overview)
------------------
import {NgModule, Component} from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import {platformBrowserDynamic} from '@angular/platform-browser-dynamic';
import { ApplicationModule } from '@angular/core/src/application_module';

@Component({
  selector:'app-root',
  template:`<div>
    <h1>Welcome to Angular 5</h1>
  </div>`
})
class AppComponent{}

@NgModule({
  imports:[BrowserModule], //Dependency Modules
  declarations:[AppComponent], //Declare the Components
  bootstrap:[ AppComponent ] //Root Component
})
class AppModule{}

platformBrowserDynamic().bootstrapModule(ApplicationModule);



Project : 01 : Creating Angular Component
*****************************************

src/index.html
---------------
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Angular 5</title>
</head>
<body>
  <!-- Custom Element -->
  <app-root></app-root>
</body>
</html>

src/main.ts
------------
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule } from './app/app.module';

platformBrowserDynamic().bootstrapModule(AppModule);



src/app/app.module.ts
----------------------

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';

@NgModule({
  imports: [BrowserModule], //Dependency Module
  declarations: [AppComponent], // Component Declaration
  bootstrap: [AppComponent]
})
export class AppModule { }


src/app/app.component.ts
-------------------------
import { Component } from '@angular/core';

@Component({
    selector:'app-root',
    template:`<div>
        <h1>Welcome to Angular 5</h1>
    </div>`
})
export class AppComponent{}


To Start the Angular Application
---------------------------------
:\>npm run start
 
To Run the Application from browser  : http://localhost:4200 


Bootstrap
---------

RWD : Responsive Web Design. WE need to be an expert in CSS 3.

Bootstrap is used to create professional responsive webpages with 
little knowledge in HTML and CSS.

It follows a strategy called Mobile First Approach.

Bootstrap categorizes devices into 

XS : Extra Small : Mobile
SM : Small : Tablets
MD : Medium : Desktop / Laptop Browser
LG : Large :  Smart TV

Bootstrap has 12 column Grid System

http://getbootstrap.com/docs/3.3/


Project 02: Adding Styles
*************************

To Install bootstrap in our project : npm install -S  bootstrap@3.3.7

To include bootstrap in our project open angular-cli.json

"styles": [
	"../node_modules/bootstrap/dist/css/bootstrap.css",
	"styles.css"
]


src/index.html
--------------

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Angular 5</title>
</head>
<body class="container">
  <!-- Custom Element -->
  <app-root></app-root>
</body>
</html>


src/main.ts
-----------
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule } from './app/app.module';

platformBrowserDynamic().bootstrapModule(AppModule);


src/app/app.module.ts
----------------------
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';

@NgModule({
  imports: [BrowserModule], //Dependency Module
  declarations: [AppComponent], // Component Declaration
  bootstrap: [AppComponent]
})
export class AppModule { }



src/app/app.component.ts
-------------------------
import { Component, ViewEncapsulation } from '@angular/core';

@Component({
    selector:'app-root',
    
    /*Inline Template */
    /*template:`<div class="jumbotron sty">
        <h1>Welcome to Angular 5</h1>
    </div>`,*/

    /*Linked Template */
    templateUrl:'./app.component.html',
    
    /*Inline style - we can use either styles or styleUrls metadata */
    /*styles:[
        '.sty{color:yellow;background-color:black}'
    ]*/
    styleUrls:[
        './app.component.css'
    ],
    encapsulation:ViewEncapsulation.Emulated
})
export class AppComponent{
    title:string;

    constructor(){
        this.title = 'Angular 5!';
    }
}


src/app/app.component.html
-------------------------
<div>
    <div class="jumbotron sty">
        <h1>Welcome to {{title}}</h1>
    </div>
</div>

src/app/app.component.css
-------------------------
.sty{
    color:yellow;
    background-color:black
}


CSS
****
1. inline
2. internal
3. styles in component
4. styleUrls in component
5. styles.css global


Project 03: Databinding
***********************

1.  interpolation  {{ }} (1-way) (component-->view)
2.  property Binding [ ] (1-way) (component-->view)
3.  Event Binding  ( )  (1-way) (view-->component)
4.  2-way Binding  [(ngModel)] (2-way) (component-->view,view-->component)
5.  class Binding  [class.className] = "condition"
6.  style Binding

src/index.html
--------------
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Angular 5 -  Databinding</title>
</head>
<body class="container">
  <!-- Custom Element -->
  <app-root></app-root>
</body>
</html>

src/main.ts
-----------
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule } from './app/app.module';

platformBrowserDynamic().bootstrapModule(AppModule);

src/app/app.module.ts
----------------------
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';
import { FormsModule } from '@angular/forms';

@NgModule({
  imports: [BrowserModule,FormsModule], //Dependency Module
  declarations: [AppComponent], // Component Declaration
  bootstrap: [AppComponent]
})
export class AppModule { }


src/app/app.component.ts
-------------------------
import { Component } from '@angular/core';

@Component({
    selector:'app-root',
    templateUrl:'./app.component.html',
    styleUrls:[
        './app.component.css'
    ]
})
export class AppComponent{
    title:string;

    city:string;
    state:string;
    currentTime:string;
    modelProperty:string;

    constructor(){
        this.title = 'Angular 5 - Databinding';
        this.city = 'Bangalore';
        this.state = 'Karnataka';
        this.currentTime = new Date().toLocaleTimeString();
        this.modelProperty = 'Initial Value';
    }

    getCurrentTime():void{
        this.currentTime = new Date().toLocaleTimeString();
    }
}

src/app/app.component.html
-------------------------
<div>
    <div class="jumbotron sty">
        <h1>{{ title }}</h1>
    </div>
    <div class="panel panel-default">
        <div class="panel-heading">
            <h3 class="panel-title">Interpolation</h3>
        </div>
        <div class="panel-body">
            <span>City : {{ city }}</span>
        </div>
    </div>
    <div class="panel panel-default">
        <div class="panel-heading">
            <h3 class="panel-title">Property Binding</h3>
        </div>
        <div class="panel-body">
            <label>State : </label>
            <input type="text" class="form-control" [value]="state">
        </div>
    </div>
    <div class="panel panel-default">
        <div class="panel-heading">
            <h3 class="panel-title">Event Binding</h3>
        </div>
        <div class="panel-body">
            <span>Current Time : {{ currentTime }}</span>
            <hr>
            <button class="btn btn-primary" (click)="getCurrentTime()">Get Current Time</button>
        </div>
    </div>
    <div class="panel panel-default">
        <div class="panel-heading">
            <h3 class="panel-title">Two way Binding</h3>
        </div>
        <div class="panel-body">
            <span>Model Property Value : {{ modelProperty }}</span>
            <hr>
            <label>Model Property :</label>
            <input type="text" class="form-control" [(ngModel)]="modelProperty">
        </div>
    </div>
</div>

src/app/app.component.css
-------------------------
.sty{
    color:yellow;
    background-color:black
}


Angular Cli command :
ng g c inner --dry-run --flat -no-spec --inline-template --inline-style

g: Generate
c: Component
--flat : No Sub folders
--no-spec : No test specification file
--inline-template : No Linked Template
--inline-style : No external CSS file
--dry-run : Will display the update without execution

scaffold	usage
---------   --------
Component	ng g component my-new-component
Directive	ng g directive my-new-directive
Pipe	    ng g pipe my-new-pipe
Service	    ng g service my-new-service
Class	    ng g class my-new-class
Guard	    ng g guard my-new-guard
Interface	ng g interface my-new-interface
Enum	    ng g enum my-new-enum
Module	    ng g module my-module


Project 04: Nested Components and Component Communication
*********************************************************

@input
@output
--------
inputs:[]
outputs:[]


src/index.html
--------------

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Angular 5 - Nested Components</title>
</head>
<body class="container">
  <!-- Custom Element -->
  <app-root></app-root>
</body>
</html>

src/main.ts
-----------
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule } from './app/app.module';

platformBrowserDynamic().bootstrapModule(AppModule);


src/app/app.module.ts
----------------------
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';
import { InnerComponent } from './inner.component';

@NgModule({
  imports: [BrowserModule], //Dependency Module
  declarations: [AppComponent, InnerComponent], // Component Declaration
  bootstrap: [AppComponent]
})
export class AppModule { }


src/app/app.component.ts
-------------------------
import { Component } from '@angular/core';
import { Person } from './models/person';

@Component({
    selector:'app-root',
    templateUrl:'./app.component.html',
    styleUrls:[
        './app.component.css'
    ]
})
export class AppComponent{
    title:string;

    appMsg:string;
    innerMsgHolder:string;
    personObjHolder:Person;

    constructor(){
        this.title = 'Nested Components \u0026 Component Communication';
        this.appMsg = 'Message from AppComponent';
        this.innerMsgHolder = '...';
        this.personObjHolder = {firstName:'',lastName:'' };
    }
   
    getMsg(msg:string):void{
        this.innerMsgHolder = msg;
    }

    getPerson(personObj:Person){
        this.personObjHolder = personObj;
    }
}

src/app/app.component.html
-------------------------
<div>
    <div class="jumbotron sty">
        <h1>{{ title }}</h1>
    </div>
    <div class="panel panel-default">
        <div class="panel-heading">
            <h3 class="panel-title">AppComponent - Parent Component</h3>
        </div>
        <div class="panel-body">
            <div class="well">
                <h2>App Component</h2>
                <hr>
                <span>InnerComponent Message : {{ innerMsgHolder }}</span>
                <hr>
                <span>First Name : {{ personObjHolder.firstName }} Last Name : {{ personObjHolder.lastName }}</span>
            </div>
            <!-- $event is a special argument which recieves the data emitted by event -->
            <app-inner [appMsgHolder]="appMsg" (innerEvent)="getMsg($event)" (personEvent)="getPerson($event)"></app-inner>
        </div>
    </div>
</div>

src/app/app.component.css
-------------------------
.sty{
    color:yellow;
    background-color:black
}

src/app/inner.component.ts
-------------------------
import { Component,Input,Output,EventEmitter } from '@angular/core';
import { Person } from './models/person';

@Component({
  selector: 'app-inner',
  template: `<div class="well">
    <h2>Inner Component</h2>
    <hr>
    <span>AppComponent Message : {{ appMsgHolder }}</span>
    <hr>
    <button class="btn btn-primary" (click)="sendMsg()">Send Message to Parent</button>
    <button class="btn btn-primary" (click)="sendPersonObj()">Send Person Object to Parent</button>
   </div>`,
   inputs:['appMsgHolder'],//We can avoid @Input decorator
   outputs:['innerEvent','personEvent'] //We can avoid @Output decorator
})
export class InnerComponent {
  //@Input() //Input Property : Recieves Input from the Parent eligible for property binding
  appMsgHolder:string;

  innerMsg:string;

  personObj:Person;

  //@Output() //Output Property :  It is eligble for Event Binding
  innerEvent:EventEmitter<string>;//Creating Custom Event which emits string

  //@Output()
  personEvent:EventEmitter<Person>;

  constructor(){
    this.innerMsg = 'Message from Inner Component';
    this.innerEvent = new EventEmitter<string>();
    this.personObj = {firstName:'Karthik', lastName:'Muthukrishnan' };
    this.personEvent = new EventEmitter<Person>();
  }

  sendMsg():void{
    //Triggering the Custom Event
    this.innerEvent.emit(this.innerMsg);
  }

  sendPersonObj():void{
    this.personEvent.emit(this.personObj);
  }
}

src/app/models/person.ts
-------------------------
export interface Person{
    firstName:string;
    lastName:string;
}

Directives
***********
It is used to power up html

1. Structural Directives : (ngFor, ngIf , ngSwitch)
Directive which changes the layout of the DOM
* is used with structural directives

2. Attribute Directives : (ngStyle, ngClass,hidden,disabled)
Directive which changes behaviour / appearance of the DOM element

3. component = directive + template
 
 
Note : Compononent can also be considered as directive, beause it powers up the html by creating Custom Element, but the directives cannot be considered as component because it does not have a View (template and templateUrl cannot be used in directives)

<app-root></app-root>

ngIf
----
<div *ngIf="isLoggedIn; else loggedOut">
  Welcome back, friend.
</div>
<ng-template #loggedOut>
  Please friend, login.
</ng-template>

<ng-container
  *ngIf="isLoggedIn; then loggedIn; else loggedOut">
</ng-container>
---------------------------------------
<ng-template #loggedIn>
  <div>
    Welcome back, friend.
  </div>
</ng-template>
<ng-template #loggedOut>
  <div>
    Please friend, login.
  </div>
</ng-template>

Project 05: Directives
**********************

src/index.html
--------------

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Angular 5 - Directives</title>
</head>
<body class="container">
  <!-- Custom Element -->
  <app-root></app-root>
</body>
</html>

src/main.ts
-----------
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule } from './app/app.module';

platformBrowserDynamic().bootstrapModule(AppModule);


src/app/app.module.ts
----------------------
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';
import { BtnHoverDirective } from './directives/btnhover.directive';

@NgModule({
  imports: [BrowserModule,FormsModule], //Dependency Module
  declarations: [AppComponent, BtnHoverDirective], // Component Declaration
  bootstrap: [AppComponent]
})
export class AppModule { }


src/app/app.component.ts
-------------------------
import { Component } from '@angular/core';
import { Employee } from './models/employee';

@Component({
    selector: 'app-root',
    templateUrl: './app.component.html',
    styleUrls: [
        './app.component.css'
    ]
})
export class AppComponent {
    title: string;
    showStatus: boolean;
    cities: string[];
    employees: Array<Employee>;
    counter:number;
    isPrimary:boolean;
    fontSize:string;
    fontStyle:string;
    fontWeight:string;
    modelProperty:string;

    constructor() {
        this.title = 'Angular Directives';
        this.showStatus = true;
        this.cities = ['Bangalore', 'Chennai', 'Mumbai', 'Pune'];
        this.employees = [
            { id: 1, name: 'Karthik' },
            { id: 2, name: 'Logith' },
            { id: 3, name: 'Ashik' }
        ];
        this.counter = 0;
        this.isPrimary  = false;
        this.fontSize ='20px';
        this.fontStyle ='normal';
        this.fontWeight = 'normal';
        this.modelProperty = 'Initial Value';
    }

    /*toggleStatus():void{
        this.showStatus = !this.showStatus;
    }*/

    changeSize(event:Event):void{
        //To get the type
        //console.log(event.constructor.name);
        //TypeCasting
        var element:HTMLInputElement = event.target as HTMLInputElement;
        this.fontSize = element.value+'px';
    }
}

src/app/app.component.html
-------------------------
<div>
    <div class="jumbotron sty">
        <h1>{{ title }}</h1>
    </div>
    <div class="panel panel-default">
        <div class="panel-heading">
            <h3 class="panel-title">Structural Directives</h3>
        </div>
        <div class="panel-body">
            <div class="well">
                <h3>NgIf Directive</h3>
                <hr>
                <div *ngIf="showStatus">This div is displayed because showStatus Property is set to true</div>
                <hr>
                <button class="btn btn-primary" (click)="showStatus = !showStatus">{{ showStatus?"Hide Div":"Show Div" }}</button>
            </div>

            <div class="well">
                <h3>NgForOf Directive</h3>
                <hr>
                <ul>
                    <li *ngFor="let city of cities">{{ city }}</li>
                </ul>
                <hr>
                <label>Employees</label>
                <select class="form-control">
                    <option *ngFor="let employee of employees; let i=index" [value]="i">{{ employee.name }}</option>
                </select>
            </div>
            <div class="well">
                <h3>NgSwitchDefault Directive</h3>
                <hr>
                <div>
                    <span>Counter : {{ counter }} </span>
                    <hr>
                    <div [ngSwitch]="counter">
                        <span *ngSwitchCase="0">Zero</span>
                        <span *ngSwitchCase="1">One</span>
                        <span *ngSwitchCase="2">Two</span>
                        <span *ngSwitchCase="3">Three</span>
                        <span *ngSwitchDefault>Not Supported</span>
                    </div>
                    <hr>
                    <button class="btn btn-primary" (click)="counter=counter+1">Increment Counter</button>
                </div>
            </div>
        </div>
    </div>
    <div class="panel panel-default">
        <div class="panel-heading">
            <h3 class="panel-title">Attribute Directives</h3>
        </div>
        <div class="panel-body">
            <div class="well">
                <h3>NgClass Directive</h3>
                <hr>
                <button class="btn" [ngClass]="{'btn-primary': isPrimary}" (click)="isPrimary=!isPrimary">{{ isPrimary?" Primary Button":"Default Button" }}</button>
            </div>
            <div class="well">
                <h3>NgStyle Directive</h3>
                <hr>
                <div [ngStyle]="{'font-style': fontStyle,'font-weight':fontWeight,'font-size':fontSize}"
				>Change the Text Style</div>
                <hr>
                <input type="checkbox" (change)="fontWeight = fontWeight=='normal'?'bold':'normal'">Bold &nbsp;
                <input type="checkbox" (change)="fontStyle = fontStyle=='normal'?'italic':'normal'">Italic &nbsp;
                <span>Size(px): </span>
                <input type="text" (change)="changeSize($event)">
            </div>
            <div class="well">
                <h3>NgModel Directive</h3>
                <hr>
                <div>
                    <span>Model Property Value : {{ modelProperty }}</span>
                    <hr>
                    <label>Model Property</label>
                    <input type="text" class="form-control" [(ngModel)]="modelProperty">
                </div>

            </div>
        </div>
    </div>
    <div class="panel panel-default">
        <div class="panel-heading">
            <h3 class="panel-title">Custom Directives</h3>
        </div>
        <div class="panel-body">
            <div class="well">
                <h3>BtnHover Directive</h3>
                <hr>
                <div>
                    <button class="btn" cgBtn data-style="btn-default">Default Button</button>
                    <button class="btn" cgBtn data-style="btn-primary">Primary Button</button>
                    <button class="btn" cgBtn data-style="btn-success">Success Button</button>
                    <button class="btn" cgBtn data-style="btn-warning">Warning Button</button>
                    <button class="btn" cgBtn data-style="btn-danger">Danger Button</button>
                </div>
            </div>
        </div>
    </div>
</div>

src/app/app.component.css
-------------------------
.sty{
    color:yellow;
    background-color:black
}

src/app/directives/btnhover.directive.ts
-----------------------------------------
import { Directive, HostBinding, HostListener } from '@angular/core';

@Directive({
    selector:'[cgBtn]',
})
export class BtnHoverDirective{
    @HostBinding('title')
    titleProperty:string;

    constructor(){
        this.titleProperty = 'CG Button Hover Title';
    }

    @HostListener('mouseenter',['$event'])
    mouseEnter(event:MouseEvent){
        var element:HTMLButtonElement = event.target as HTMLButtonElement;
        var style = element.getAttribute('data-style');
        element.classList.add(style);
    }

    @HostListener('mouseleave',['$event'])
    mouseExit(event:MouseEvent){
        var element:HTMLButtonElement = event.target as HTMLButtonElement;
        var style = element.getAttribute('data-style');
        element.classList.remove(style);
    }
}

src/app/models/employee.ts
---------------------------
export interface Employee{
    id:number,
    name:string;
}



Promise(It is used in the Deferred Execution) Demo
---------------------------------------------------
var getRandomNumber = function(){
   return new Promise(function(resolve,reject){
       setTimeout(function(){
			 var randomNumber = Math.round(Math.random()*100);
             if(randomNumber % 2 == 0)
                  resolve(randomNumber);
			 else
				reject(randomNumber);
       },1000);
   });
}

getRandomNumber().then(function(data){
	console.log(`Promise Resolved :${data}`);
},function(errData){
	console.log(`Promise Rejected :${errData}`);
});


Observables
***********
observable is an array whose items arrive asynchronously over time. 
Observables help you manage asynchronous data, such as data coming from a backend service.
Observables are used within Angular itself, including Angular’s event system and its http client service. 
To use observables, Angular uses a third-party library called Reactive Extensions (RxJS). 
Observables are proposed feature for ES 2016, the next version of JavaScript.

src/index.html
---------------
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Observables</title>
</head>
<body class="container">
  <!-- Custom Element -->
  <app-root></app-root>
</body>
</html>


src/main.ts
------------
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule } from './app/app.module';

platformBrowserDynamic().bootstrapModule(AppModule);


src/app/app.module.ts
---------------------
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';

@NgModule({
  imports: [BrowserModule,FormsModule], //Dependency Module
  declarations: [AppComponent], // Component Declaration
  bootstrap: [AppComponent]
})
export class AppModule { }



src/app/app.component.ts
------------------------
import { Component } from '@angular/core';
import { Observable,Subject } from 'rxjs';
import { map, filter } from 'rxjs/operators';

@Component({
    selector: 'app-root',
    templateUrl: './app.component.html',
    styleUrls: [
        './app.component.css'
    ]
})
export class AppComponent {
    title: string;

    constructor() {
        this.title = 'Observables';

        /*var observableObj:Observable<number> = Observable.from([1,2,3,4,5]);
    
        observableObj.subscribe((n:number)=>{
            console.log(`Number : ${n}`);
        },(err)=>{
            console.log(`Error : ${err}`);
        },()=>{
            console.log(`Task completed Successfully`);
        });*/

        /* var promiseObj = Promise.resolve(5);
         //Converting Promise to Observable
         var observableObj:Observable<number>  = Observable.fromPromise(promiseObj);
     
         observableObj.subscribe((n:number)=>{
             console.log(`Number : ${n}`);
         });*/

        /*var observableObj:Observable<MouseEvent> = Observable.fromEvent(document,'mousemove');
       
        observableObj.subscribe((event:MouseEvent)=>{
           document.getElementById('target').innerHTML = `X : ${event.x} Y: ${event.y}`;        
        });*/


        /*Observable.interval(10).subscribe((data)=>{
           console.log(data);
        });*/


        /*Observable.from([1,2,13,4,5]).every( (n) => n < 10 ).subscribe((result:boolean)=>{
           console.log(result);
        });*/

        /*Observable.range(1, 5).pipe(
            filter(x => x % 2 === 1),
            map(x => x)
        ).subscribe((n: number) => {
            console.log(n);
        });*/

        var observableObj = Observable.create(observer => {
            setInterval(() => {
                try {
                    var randomNumber = Math.round(Math.random() * 10);
                    if (randomNumber == 0) {
                        throw `Zero Exception Occured : ${randomNumber}`;
                    }
                    else if (randomNumber == 1) {
                        observer.complete();
                    }
                    else {
                        observer.next(randomNumber);
                    }
                } catch (err) {
                    observer.error(err);
                }
            }, 1000);
        });

        observableObj.subscribe((n) => {
            console.log(`Genearted Number : ${n}`);
        }, (err) => {
            console.log(`Error : ${err}`);
        }, () => {
            console.log(`Completed Successfully`);
        });
    }
}

src/app/app.component.html
--------------------------
<div>
    <div class="jumbotron sty">
        <h1>{{ title }}</h1>
    </div>
    <div class="panel panel-default">
        <div class="panel-heading">
            <h3 class="panel-title">Obervable Demo</h3>
        </div>
        <div class="panel-body">
            <div class="well">
                <h2 id="target">X : Y : </h2>
            </div>
        </div>
    </div>
</div>


Project 06: Angular Pipe
*************************

pipe (Filter-angularJs)

	| pipe symbol

1. to Format the data
2. to filter out the data

CurrencyPipe
DatePipe
DecimalPipe(number)
JsonPipe
LowerCasePipe
UpperCasePipe
PercentPipe
SlicePipe
AsyncPipe

curreny
-------
{{ 23 | currency}}
{{ 23 | currency : 'USD' : true }}
{{ 23 | currency : 'INR' : true }}


decimal/number
-------------
<p> {{num1 | number}} </p>
<p> {{num1 | number:'3.2-5'}} </p>
<p>{{12.638467846| number:'3.2-5'}} </p> 
o/p:- 012.63847 

<p>{{0.5 | number:'3.2-5'}} </p> 
o/p:- 000.50 

Use format '3.2-5' : 
minIntegerDigits = 3 
minFractionDigits = 2 
maxFractionDigits = 5 

Percent Pipe
-------------
{{ 2.5 | percent}}  o/p- 250%

{{ 2.5 | percent:'2.2-5'}}  o/p- 250.00%


slice pipe
-----------
slice:1:3 means return the items from the 1st to the 3rd index inclusive (indexes start at 0).
slice:2 means return the items from the 2nd index to the end of the array.
slice:2:-1 means return the items from the 2nd index to one from the end of the array.

Custom Pipe
*************
1. create a pipe file (titlteCase.pipe.ts)
2. create a class that class should implement PipeTransform Interface
   decorate that class with @Pipe decorator
3. override transform() method and write own logic
4. register that pipe in module(app.module.ts)
5. add to the declarations:[] in module 
6. use the pipe  {{"I am a student" | titlecase}}

src/index.html
--------------
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Angular Pipe</title>
</head>
<body class="container">
  <!-- Custom Element -->
  <app-root></app-root>
</body>
</html>

src/main.ts
-----------
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule } from './app/app.module';

platformBrowserDynamic().bootstrapModule(AppModule);


src/app/app.module.ts
------------------------
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';
import { ChangeCasePipe } from './pipes/changecase.pipe';

@NgModule({
  imports: [BrowserModule,FormsModule], //Dependency Module
  declarations: [AppComponent,ChangeCasePipe], // Component Declaration
  bootstrap: [AppComponent]
})
export class AppModule { }


src/app/app.component.ts
------------------------
import { Component } from '@angular/core';
import { Observable } from 'rxjs';
import { Employee } from './models/employee';

@Component({
    selector: 'app-root',
    templateUrl: './app.component.html',
    styleUrls: [
        './app.component.css'
    ]
})
export class AppComponent {
    title: string;
    currentDate:Date;
    employees : Array<Employee>;
    observableObj:Observable<number>;
    observableNumber:number;

    constructor() {
        this.title = 'Angular Pipe';
        this.currentDate = new Date();
        this.employees = [
            { id:1, name:'Karthik' },
            { id:2, name:'John' },
            { id:3, name:'Ashik' }
        ];
        this.observableObj = Observable.interval(1000);
    }

    subscribeIt():void{
        this.observableObj.subscribe((n:number)=>{
            this.observableNumber = n;
        });
    }
}


src/app/app.component.html
------------------------
<div>
    <div class="jumbotron sty">
        <h1>{{ title }}</h1>
    </div>
    <div class="panel panel-default">
        <div class="panel-heading">
            <h3 class="panel-title">Inbuilt Pipes</h3>
        </div>
        <div class="panel-body">
            <div class="well">
                <h2>UpperCasePipe</h2>
                <hr>
                <span>{{ 'Capgemini' | uppercase }}</span>
            </div>
            <div class="well">
                <h2>LowerCasePipe</h2>
                <hr>
                <span>{{ 'Capgemini' | lowercase }}</span>
            </div>
            <div class="well">
                <h2>CurrencyPipe</h2>
                <hr>
                <span>{{ 200 | currency:'INR':true }}</span>
            </div>
            <div class="well">
                <h2>DatePipe</h2>
                <hr>
                <span>{{ currentDate | date : 'dd EEEE MMMM yyyy' }}</span>
            </div>
            <div class="well">
                <h2>JsonPipe</h2>
                <hr>
                <span>{{ employees | json }}</span>
            </div>
            <div class="well">
                <h2>AsyncPipe</h2>
                <span>via async : {{ observableObj | async }}</span>
                <hr>
                <span *ngIf="observableNumber !== undefined">Retrieving via Subscribe : {{ observableNumber }}</span>
                <hr>
                <button class="btn btn-primary" (click)="subscribeIt()">Subscribe</button>
            </div>
        </div>
    </div>
    <div class="panel panel-default">
        <div class="panel-heading">
            <h3 class="panel-title">Custom Pipes</h3>
        </div>
        <div class="panel-body">
            <h2>ChangeCase Pipe</h2>
            <hr>
            <span>{{ 'god is great' | changecase:'upper' }}</span>
            <hr>
            <span>{{ 'GOD is GREAT' | changecase:'lower' }}</span>
            <hr>
            <span>{{ 'god is great' | changecase:'title' }}</span>
        </div>
    </div>
</div>


src/app/models/employee.ts
------------------------
export interface Employee{
    id:number,
    name:string;
}

src/app/directives/changecase.pipe.ts
--------------------------------------
import {Pipe,PipeTransform} from '@angular/core';

@Pipe({
    name:'changecase'
})
export class ChangeCasePipe implements PipeTransform{
    transform(value: string, toWhichCase:string): string{
        var result = value;
        if(toWhichCase.toLowerCase() == 'upper')
            result = value.toUpperCase();
         if(toWhichCase.toLowerCase() == 'lower')
            result = value.toLowerCase();
        if(toWhichCase.toLowerCase() == 'title')
            result = value.replace(/\w\S*/g, function(txt){return txt.	;});
        return result;
    }
}



Web optimization and Build
---------------------------

In Angular we have 2 modes of compilation

1. JIT (Just-In-Time)Compilation : 
Compiles application in the browser at run time

chunk {inline} inline.bundle.js (inline) 5.79 kB [entry] [rendered]
chunk {main} main.bundle.js (main) 17.3 kB [initial] [rendered]
chunk {polyfills} polyfills.bundle.js (polyfills) 557 kB [initial] [rendered]
chunk {styles} styles.bundle.js (styles) 362 kB [initial] [rendered]
chunk {vendor} vendor.bundle.js (vendor) 7.15 MB [initial] [rendered] - 
 *** will have the Angular Compiler also which compiles your angular application in the browser at runtime

The browser needs to download the angular compiler. 
It wont perform web optimization

> ng serve (It wont create dist folder but
  it will be stored in the internal memory) - 
  It wont perform web optimization(Minifying the Scripts)

> ng build (It creates a dist folder)-
It wont perform web optimization(Minifying the Scripts)


2. AOT (Ahead-Of-Time)Compilation : 
Application will be pre compiled (Production Environment)

The browser doesnt require angular compiler because 
it will be compiled in the build itself.

> ng serve --aot (It wont create dist folder but it will be stored in the internal memory) - 
      It wont perform web optimization(Minifying the Scripts)

> ng build --aot (It creates a dist folder)-It wont perform web optimization(Minifying the Scripts)

> ng build --prod (It creates a dist folder)-It performs web optimization(Minifying the Scripts)


inline.bundle.js
-----------------
This is a webpack loader. A tiny file with Webpack utilities that are needed when loading other files.

vendor.bundle.js
----------------
It includes the Angular libraries with little or no modification. This is to speed up the build process. 

main.bundle.js
---------------
Your own code, and anything else you imported etc


Run Commands using Package.json
--------------------------------

> npm run start ( "start": "ng serve --port 3000")

> npm run build ( "build": "ng build --prod")


Project 07 : Angular Services
******************************
Services
---------
  Any sort of task / logic which can be shared with Angular Components.
  Services are Singleton.(only 1 instance of service is maintained)
  Services are Lazy loaded.(services are instantiated only if component tries to use)
  Services can be injected using Angular's DI(Dependency Injection)
  
  
  RESTFul Services
  With the Help of HTTP Method we can achieve SOA(Service Oriented Architecture) 
  
  CRUD Operation on a resource(Any JS object)
  
  employees :[{"id":1,"name":"Karthik"},{"id":2,"name":"Ganesh"}]
  
  
  GET - Read : 
  -------------
  To get all the records : GET : http://localhost:3000/api/
  
  Response: 200
  [{"id":1,"name":"Karthik"},{"id":2,"name":"Ganesh"}]
  
  
  To get particular record : GET : http://localhost:3000/api/employees/1
  
  Response: 200
  {"id":1,"name":"Karthik"}
  
  
  POST - Create
  -------------
  
  To insert a record : POST : http://localhost:3000/api/employees
  
  Request Body: {"id":3,"name":"Ashik"} 
  Content-Type: application/json
  
  Response: 201(Created)
  {"id":3,"name":"Ashik"} 
  
  
  PUT - Update
  -------------
  To update a record : POST : http://localhost:3000/api/employees/1
  
  Request Body: {"id":1,"name":"Karthik Muthukrishnan"} 
  Content-Type: application/json
  
  Response: 202(Accepted)
  
  
  
  DELETE - Delete
  ----------------
  To delete a record : DELETE : http://localhost:3000/api/employees/1
  
  Response: 204(No Content)
  
  
  Fake Online REST API for Testing and Prototyping 
    http://jsonplaceholder.typicode.com/
	
  To Test the RestFul Calls we can use Chrome Plugin : PostMan
  
  
Promise vs Observable
********************** 
Promises:
-----------
return a single value
not cancellable
more readable code with try/catch and async/await

Observables:
-----------
work with multiple values over time
cancellable
support map, filter, reduce and similar operators
use Reactive Extensions (RxJS)
an array whose items arrive asynchronously over time

Project 07_01: HTTP with observable
*************************************
app.component.html
-------------------
<div>
  <div class="jumbotron sty">
    <h1>Observable example</h1>>
  </div>
  <div class="panel panel-default">
    <div class="panel-heading">
      <h3 class="panel-title">Todo List</h3>
    </div>
    <div class="panel-body">
      <table class="table table-responsive">
        <thead>
          <tr>
            <th>UserId</th>
            <th>Id</th>
            <th>Title</th>
            <th>Status</th>
          </tr>
        </thead>
        <tbody>
          <tr *ngFor="let todo of todos">
            <td>{{ todo.userId}}</td>
            <td>{{ todo.id}}</td>
            <td>{{ todo.title}}</td>
            <td>{{ todo.completed?'Completed':'Pending'}}</td>           
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</div>

app.module.ts
---------------
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { TodoService } from './todo.service';

@NgModule({
  imports: [BrowserModule, HttpClientModule], //Dependency Module
  declarations: [AppComponent], // Component Declaration
  bootstrap: [AppComponent],
  providers: [TodoService]
})
export class AppModule {
}

app.component.ts
------------------
import { Component, Inject, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Todo } from './todo';
import { TodoService } from './todo.service';

@Component({
    selector: 'app-root',
    templateUrl: 'app.component.html'
})
export class AppComponent implements OnInit {
    todos: Todo[];

    constructor(public todoService: TodoService, ) {
        this.todos = [];
    }
    ngOnInit(): void {
        this.todoService.getAllTodos()
            .subscribe((todoList: Todo[]) => {
                this.todos = todoList;
            });
    }
}

todo.service.ts
----------------
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';
import { Todo } from './todo';

@Injectable()
export class TodoService {
    constructor(public httpClient: HttpClient) {

    }
    getAllTodos(): Observable<Todo[]> {
        return this.httpClient.get<Todo[]>("https://jsonplaceholder.typicode.com/todos")

    }
} 
todo.ts
--------
export interface Todo {
    userId: number,
    id: number,
    title: string,
    completed: boolean
}



src/index.html
--------------
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Angular Services</title>
</head>
<body class="container">
  <!-- Custom Element -->
  <app-root></app-root>
</body>
</html>

src/main.ts
-----------
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule } from './app/app.module';

platformBrowserDynamic().bootstrapModule(AppModule);


src/app/app.module.ts
---------------------
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';
import { CalculatorService } from './services/calculator.service';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { TodoService } from './services/todo.service';
import { LoggerInterceptor } from './services/logger.interceptor';
import { AddHeaderInterceptor } from './services/addheader.interceptor';


@NgModule({
  imports: [BrowserModule,HttpClientModule], //Dependency Module
  declarations: [AppComponent], // Component Declaration
  bootstrap: [AppComponent],
  providers: [
    CalculatorService,
    TodoService,
    { provide: 'square', useFactory: () => (n: number) => n * n },
    { provide: 'email', useValue: "karthik.muthukrishnan@capgemini.com" },
	{ provide: HTTP_INTERCEPTORS, useClass: LoggerInterceptor, multi: true },
	{ provide: HTTP_INTERCEPTORS, useClass: AddHeaderInterceptor, multi: true }

  ]
})
export class AppModule { }


src/app/app.component.ts
------------------------
import { Component, Inject, OnInit } from '@angular/core';
import { CalculatorService } from './services/calculator.service';
import { HttpClient } from '@angular/common/http';
import { Todo } from './models/todo';
import { TodoService } from './services/todo.service';
import { AppErrorHandler } from './models/app.errorhandler';

@Component({
    selector: 'app-root',
    templateUrl: './app.component.html',
    styleUrls: [
        './app.component.css'
    ]
    //providers:[CalculatorService] //Registering the Service
})
export class AppComponent implements OnInit {
    title: string;
    todos: Todo[];

    constructor(public calcService: CalculatorService,
        public todoService: TodoService,
        @Inject('square') public squareFn: Function,
        @Inject('email') public myEmailId: string) {
        this.title = 'Angular Services';
        //this.calcService = new CalculatorService();
        console.log(this.calcService.add(5, 6));
        console.log(this.squareFn(7));
        console.log(this.myEmailId);
        this.todos = [];
    }

    ngOnInit(): void {
        this.todoService.getAllTodos()
            .subscribe((todoList: Todo[]) => {
                this.todos = todoList;
            }, (err: AppErrorHandler) => {
                console.log(err.message);
            });
    }

    getTodoById(id: number): void {
        this.todoService.getTodoById(id).subscribe((todo: Todo) => {
            alert(`Id:${todo.id} Title:${todo.title} Status:${todo.completed ? "Completed" : "Pending"}`);
        }, (err: AppErrorHandler) => {
            console.log(err.message);
        });
    }

    addTodo(): void {
        var todoObj: Todo = { id: 999, title: 'Testing', userId: 999, completed: false };
        this.todoService.addTodo(todoObj).subscribe((todo: Todo) => {
            this.todos.push(todo);
            alert('Record Added');
        }, (err: AppErrorHandler) => {
            console.log(err.message);
        });
    }

    delete(todo: Todo) {
        this.todoService.deleteTodo(todo.id).subscribe(() => {
            var indexPos = this.todos.findIndex(function (todoObj) {
                return todoObj.id == todo.id;
            });
            this.todos.splice(indexPos, 1);
            alert('Record Deleted');
        }, (err: AppErrorHandler) => {
            console.log(err.message);
        });
    }

    update(todo: Todo) {
        todo.title += '- updated';
        this.todoService.updateTodo(todo).subscribe((todoObj: Todo) => {
            todo = todoObj;
            alert('Record Updated');
        }, (err: AppErrorHandler) => {
            console.log(err.message);
        });
    }
}

src/app/app.component.css
--------------------------
.sty{
    color:yellow;
    background-color:black
}

src/app/app.component.html
--------------------------
<div>
    <div class="jumbotron sty">
        <h1>{{ title }}</h1>
    </div>
    <div class="panel panel-default">
        <div class="panel-heading">
            <h3 class="panel-title">Todo List</h3>
        </div>
        <div class="panel-body">
            <button class="btn btn-primary" (click)="addTodo()">Add Todo</button>
            <hr>
            <table class="table table-responsive">
                <thead>
                    <tr>
                        <th>UserId</th>
                        <th>Id</th>
                        <th>Title</th>
                        <th>Status</th>
                        <th></th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    <tr *ngFor="let todo of todos">
                        <td>{{ todo.userId}}</td>
                        <td>{{ todo.id}}</td>
                        <td>{{ todo.title}}</td>
                        <td>{{ todo.completed?'Completed':'Pending'}}</td>
                        <td>
                            <button class="btn btn-primary" (click)="getTodoById(todo.id)">View Todo</button>
                        </td>
                        <td>
                            <button class="btn btn-primary" (click)="delete(todo)">Delete</button>
                        </td>
                        <td>
                            <button class="btn btn-primary" (click)="update(todo)">Update</button>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

src/app/constants/url.constants.ts
----------------------------------
export const URLS = {
    getAllTodosURL:'https://jsonplaceholder.typicode.com/todos',
    getAllTodosMockURL:'api/todo.json'
}

src/app/models/app.errorhandler.ts
----------------------------------
export class AppErrorHandler{
    status:number;
    statusText:string;
    url:string;
    message:string;
}

src/app/models/todo.ts
----------------------
export interface Todo {
    userId: number,
    id: number,
    title: string,
    completed: boolean
}

src/app/services/calculator.service.ts
--------------------------------------

import {Injectable} from '@angular/core';

@Injectable()
export class CalculatorService{
    add(a,b){
        return a + b;
    }
    multiply(a,b){
        return a * b;
    }
}


src/app/services/todo.service.ts
--------------------------------
import {Injectable} from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { catchError } from 'rxjs/operators';
import {} from 'rxjs/'

import { HttpClient, HttpErrorResponse,HttpHeaders } from '@angular/common/http';
import {Todo} from '../models/todo';
import { URLS } from '../constants/url.constants';
import { AppErrorHandler } from '../models/app.errorhandler';
import { ErrorObservable } from 'rxjs/observable/ErrorObservable';


@Injectable()
export class TodoService{
    constructor(public httpClient:HttpClient){

    }

    getAllTodos():Observable<Todo[] | AppErrorHandler>{
        return this.httpClient.get<Todo[]>(URLS.getAllTodosURL)
        .pipe(catchError(err=> this.httpErrorHandler(err)));
    }

    getTodoById(id:number):Observable<Todo | AppErrorHandler>{
        console.log(id);
        return this.httpClient.get<Todo>(`${URLS.getAllTodosURL}/${id}`)
            .pipe(catchError(err=> this.httpErrorHandler(err)));
    }

    
    addTodo(todo: Todo): Observable<Todo | AppErrorHandler> {
        return this.httpClient.post<Todo>(URLS.getAllTodosURL, JSON.stringify(todo), {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' })
        }).pipe(catchError(err=> this.httpErrorHandler(err)));
    }

    updateTodo(todo: Todo): Observable<Todo | AppErrorHandler> {
        return this.httpClient.put<Todo>(`${URLS.getAllTodosURL}/${todo.id}`, JSON.stringify(todo), {
            headers: new HttpHeaders({ 'Content-Type': 'application/json' })
        }).pipe(catchError(err=> this.httpErrorHandler(err)));
    }

    deleteTodo(id:number):Observable<object | AppErrorHandler>{
        return this.httpClient.delete(`${URLS.getAllTodosURL}/${id}`)
        .pipe(catchError(err=> this.httpErrorHandler(err)));
    }

    httpErrorHandler(err:HttpErrorResponse):Observable<AppErrorHandler>{
        let appError = new AppErrorHandler();
        appError.status = err.status;
        appError.statusText = err.statusText;
        appError.url = err.url;
        appError.message = `${err.url} ${err.statusText}`;
        return ErrorObservable.create(appError);
    }
} 

src/api/todo.json
------------------
[
  {
      "userId": 10,
      "id": 200,
      "title": "ipsam aperiam voluptates qui",
      "completed": false
    }

]


src/app/services/logger.interceptor.ts
---------------------------------------
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { tap } from 'rxjs/operators';
import { HttpRequest, HttpInterceptor, HttpHandler, HttpEvent, HttpEventType } from '@angular/common/http';

@Injectable()
export class LoggerInterceptor implements HttpInterceptor {
    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
        console.log(`Requested URL : ${req.url}`);
        //return next.handle(req);

        //Tapping Response
        return next.handle(req)
            .pipe(
            tap(event => {
                if (event.type === HttpEventType.Response) {
                    console.log(event.body);
                }
            }));
    }
}

src/app/services/addheader.interceptor.ts
-----------------------------------------

import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { HttpRequest, HttpInterceptor, HttpHandler, HttpEvent } from '@angular/common/http';

@Injectable()
export class AddHeaderInterceptor implements HttpInterceptor {
    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
       
        let headerReq = req.clone({
            setHeaders:{'x-company-name':'capgemini'}
        }); 
        return next.handle(headerReq);
    }
}

angular-cli.json
-----------------
 "assets": [
	"api",
	"assets",
	"favicon.ico"
  ]
  
Note : add api folder to serve static contents, once updated restart the application

Project 08 : Angular Forms
**************************

Template Driven Forms : Import the FormsModule
Model Driven Forms : Import the ReactiveFormsModule

Classes:
ng-pristine : No user interaction occured
ng-valid : It meets all the validation
ng-invalid : One of the Validation Fails
ng-dirty : User interaction occured.

src/index.html
--------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Angular Forms</title>
</head>
<body class="container">
 <!-- Custom Element -->
    <app-root></app-root>
</body>
</html>

src/main.ts
------------
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule } from './app/app.module';

platformBrowserDynamic().bootstrapModule(AppModule);


src/app.module.ts
-----------------
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms'; //Template Driven Forms
import { ReactiveFormsModule } from '@angular/forms'; //Model Driven Forms
import { AppComponent } from './app.component';
import { ModelDrivenComponent } from './model-driven-component/model.driven.component';
import { TemplateDrivenComponent } from './template-driven-component/template.driven.component';


@NgModule({
    imports:[ BrowserModule, FormsModule, ReactiveFormsModule ],
    declarations:[AppComponent,ModelDrivenComponent,TemplateDrivenComponent],
    bootstrap:[AppComponent]
})
export class AppModule{}

src/app/app.component.ts
------------------------
import { Component } from '@angular/core';

@Component({
    selector: 'app-root',
    templateUrl: './app.component.html'
})
export class AppComponent {

}


src/app/app.component.html
---------------------
<div>
    <div class="jumbotron sty">
        <h1>Angular Forms</h1>
    </div>
    <div class="panel panel-default">
        <div class="panel-heading">
            <h3 class="panel-title">Template-driven form</h3>
        </div>
        <div class="panel-body">
            <app-template></app-template>
        </div>
    </div>
    <div class="panel panel-default">
        <div class="panel-heading">
            <h3 class="panel-title">Model-driven form</h3>
        </div>
        <div class="panel-body">
            <app-model></app-model>
        </div>
    </div>
</div>

src/app/app.component.css
--------------------------
.sty{
    color:yellow;
    background-color: black;
}

src/app/template-driven-component/template.driven.component.ts
----------------------------------------------------------
import { Component } from "@angular/core";

@Component({
    selector: 'app-template',
    templateUrl: './template.driven.component.html',
    styles: [
        'input.ng-invalid.ng-dirty{border-color:red}'
    ]
})
export class TemplateDrivenComponent {
    onSubmit(person: any) {
        alert(`Name: ${person.name} Age: ${person.age}`);
    }
}

src/app/template-driven-component/template.driven.component.html
----------------------------------------------------------
<div>
    <h2>Template Driven Forms</h2>
    <hr>
    <form class="form-horizontal" #person="ngForm" (submit)="onSubmit(person.value)">
        <div class="form-group">
            <label for="name" class="col-sm-2 control-label">*Name</label>
            <div class="col-sm-10">
                <input type="text" class="form-control" id="name" name="name" placeholder="Your name" #name="ngModel" [(ngModel)]="person.name" required pattern="[a-zA-Z]+">
                <small *ngIf="name.hasError('required') && name.dirty" class="text-danger">Name is required</small>
                <small *ngIf="name.hasError('pattern') && name.dirty" class="text-danger">Only alphabets allowed</small>
            </div>
        </div>
        <div class="form-group">
            <label for="age" class="col-sm-2 control-label">*Age</label>
            <div class="col-sm-10">
                <input type="text" class="form-control" id="age" name="age" placeholder="Your age" #age="ngModel" [(ngModel)]="person.age" required pattern="[0-9]+">
                <small *ngIf="age.hasError('required') && age.dirty" class="text-danger">Age is required</small>
                <small *ngIf="age.hasError('pattern') && age.dirty" class="text-danger">Only Numbers allowed</small>
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-offset-2 col-sm-10">
                <button type="submit" class="btn btn-primary" [disabled]="!person.valid">Submit</button>
            </div>
        </div>
    </form>
    <hr>
    <div>
        Form Value: {{ person.value | json }}
    </div>
    <div>
        Form Valid Status: {{ person.status | json }}
    </div>
</div>


src/app/model-driven-component/model.driven.component.ts
----------------------------------------------------
import { Component } from "@angular/core";
import {FormBuilder,FormGroup,FormControl,Validators} from '@angular/forms';
import { EmailValidator } from "../validators/email.validator";

@Component({
    selector:'app-model',
    templateUrl:'./model.driven.component.html',
    styles:[
        'input.ng-invalid.ng-dirty{border-color:red}'
    ]
})
export class ModelDrivenComponent{
    personForm:FormGroup;
    fb:FormBuilder;

    constructor(){
        this.fb = new FormBuilder();//Since it available as a service this can be done using Dependency Injection as well
        this.buildForm();
    }

    get name():FormControl{
        return this.personForm.get('name') as FormControl;
    }

    get email():FormControl{
        return this.personForm.get('email') as FormControl;
    }

    buildForm():void{
        this.personForm = this.fb.group({
            name:[null,[
                Validators.required,
                Validators.pattern('[a-zA-Z]+')
            ]],
            //Synchronous Validation(2nd Argument)
            //email:[null,EmailValidator.isValidEmail],
            //Asynchronous Validation(3rd Argument)
            email:[null,null,EmailValidator.isValidEmail],
            city:'bangalore'
        })
    }
    submitForm():void{
        alert(`Name: ${this.personForm.value.name} Email: ${this.personForm.value.email} City: ${this.personForm.value.city}`);
    }
    resetForm():void{
        console.log(this.personForm.reset());
    }
}

src/app/model-driven-component/model.driven.component.html
----------------------------------------------------
<div>
        <h2>Model Driven Forms</h2>
        <hr>
        <form class="form-horizontal" [formGroup]="personForm" (submit)="submitForm()">
            <div class="form-group">
                <label for="name" class="col-sm-2 control-label">*Name</label>
                <div class="col-sm-10">
                    <input type="text" class="form-control" id="name" formControlName="name">
                    <small *ngIf="!name.pristine && name.hasError('required')" class="text-danger">Name is required</small>
                    <small *ngIf="!name.pristine && name.hasError('pattern')" class="text-danger">Only alphabets allowed</small>
                </div>
            </div>
            <div class="form-group">
                <label for="email" class="col-sm-2 control-label">Email</label>
                <div class="col-sm-10">
                    <input type="text" class="form-control" id="email" formControlName="email">
                    <small *ngIf="!email.pristine && email.pending" class="text-warning">Validation in Progress...</small>
                    <small *ngIf="!email.pristine && email.hasError('invalidMail')" class="text-danger">Invalid Email id(you have typed karthik@test.com)</small>
                </div>
            </div>
            <div class="form-group">
                    <label for="city" class="col-sm-2 control-label">City</label>
                    <div class="col-sm-10">
                        <select class="form-control" id="city" formControlName="city">
                            <option value="bangalore">Bangalore</option>
                            <option value="chennai">Chennai</option>
                            <option value="mumbai">Mumbai</option>
                        </select>
                    </div>
                </div>
            <div class="form-group">
                <div class="col-sm-offset-2 col-sm-10">
                    <button type="submit" class="btn btn-primary" [disabled]="!personForm.valid">Submit</button>
                    <button type="reset" class="btn btn-primary">Reset</button>
                </div>
            </div>
        </form>
        <hr>
        <div>
            Form Value: {{personForm.value | json }}
        </div>
        <div>
            Form Status:{{personForm.status | json }}
        </div>
    </div>
	
src/app/validators/email.validator.ts
---------------------------------
import { FormControl } from '@angular/forms';

export class EmailValidator {
    /*Sync Validation*/
    /* static isValidEmail(control:FormControl){
         if(control.value == 'karthik@test.com'){
             return {invalidMail:true} //The Control is invalid
         }
         return null;//The control is valid
     }*/

    /*Async Validation*/
    static isValidEmail(control: FormControl) {
        return new Promise((resolve, reject) => {
            setTimeout(function () {
                if (control.value == 'karthik@test.com') {
                    resolve({ invalidMail: true });
                } 
                else {
                    resolve(null);
                }
            }, 5000);
        });
    }
}

Project 09 : Routing
********************
Using Angular Routing Feature we can easily create SPA(Single Page Application)

1. Specify the Base URL :<base href="/">
2. Import the RouterModule and specify it in the imports array
3. Define the Routes

app.module.ts
-------------
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { RouterModule } from '@angular/router';

import { AppComponent } from './app.component';
import { HomeComponent } from './home/home.component';
import { AboutusComponent } from './aboutus/aboutus.component';
import { CareerComponent } from './career/career.component'

import { appRoutes } from './routerConfig';

@NgModule({
  imports: [BrowserModule, RouterModule.forRoot(appRoutes)], //Dependency Module
  declarations: [AppComponent, HomeComponent, AboutusComponent, CareerComponent], // Component Declaration
  bootstrap: [AppComponent]
})
export class AppModule {
}

routerConfig.ts
---------------
import { Routes } from '@angular/router';
import { HomeComponent } from './home/home.component';
import { AboutusComponent } from './aboutus/aboutus.component'
import { CareerComponent } from './career/career.component'


export const appRoutes: Routes = [
    {
        path: 'home',
        component: HomeComponent
    },
    {
        path: 'about',
        component: AboutusComponent
    },
    {
        path: 'career',
        component: CareerComponent
    }
];

app.component.ts
----------------
import { Component } from "@angular/core";

@Component({
    selector : 'app-root',
    templateUrl : 'app.component.html'
})
export class AppComponent{
    title = 'Angular Router Tutorial';

}

app.component.html
------------------
<div style="text-align:center">
    <h1>
      Welcome to {{title}}!!
    </h1>
    <nav>
      <a routerLink="home">Home</a>
      <a routerLink="about">About</a>
      <a routerLink="career">Career</a>
    </nav>
    <router-outlet></router-outlet>
 </div>

Create 3 components home,aboutus,career

ng g c home
ng g c aboutus
ng g c career


Project 10 : Routing
*********************
src/index.html
--------------
<!DOCTYPE html>
<html lang="en">
<head>
  <base href="/"> <!-- base URL http://localhost:4200/-->
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Angular Routing</title>
</head>
<body class="container">
  <!-- Custom Element -->
  <app-root></app-root>
</body>
</html>

src/main.ts
------------
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule } from './app/app.module';

platformBrowserDynamic().bootstrapModule(AppModule);

src/app/app.module.ts
----------------------
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser'
import { AppComponent } from './app.component';
import { HomeComponent } from './home/home.component';
import { AboutComponent } from './about/about.component';
import { ContactComponent } from './contact/contact.component';
import { NotfoundComponent } from './notfound/notfound.component';
import { RouterModule } from '@angular/router';
import { AboutGuardService } from './services/about.guard.service';
import { AppRouteModule } from './app.route.module';
import { ContactModule } from './contact/contact.module';


@NgModule({
    imports: [BrowserModule, AppRouteModule,ContactModule],
    declarations: [AppComponent, HomeComponent, AboutComponent, ContactComponent, NotfoundComponent],
    bootstrap: [AppComponent]  ,
    providers:[AboutGuardService]
})
export class AppModule { }


src/app/app.component.html
--------------------------
<div>
    <div class="jumbotron sty">
        <h1>Angular Routing</h1>
    </div>
    <ol class="breadcrumb">
        <li>
            <a [routerLink]="[ '/home' ]" routerLinkActive="active">Home</a>
        </li>
        <li>
            <a [routerLink]="[ '/about',id ]" routerLinkActive="active">About</a>
        </li>
        <li>
            <a [routerLink]="[ '/contact' ]" routerLinkActive="active">Contact</a>
        </li>
        <li>
            <a [routerLink]="[ '/nothing' ]" routerLinkActive="active">NotFound</a>
        </li>
    </ol>
    <div>
        <!-- Place holder to mount the component -->
        <router-outlet></router-outlet>
    </div>
</div>

src/app/app.component.css
-------------------------
.sty{
    color:yellow;
    background-color: black;
}

src/app/app.routes.ts
----------------------
import { Routes } from '@angular/router';
import { HomeComponent } from './home/home.component';
import { AboutComponent } from './about/about.component';
import { ContactComponent } from './contact/contact.component';
import { NotfoundComponent } from './notfound/notfound.component';
import { AboutGuardService } from './services/about.guard.service';
import { contactRoutes } from './contact/contact.routes';

//Defining the Application Routes
export const appRoutes: Routes = [
    { path: '', redirectTo: 'home', pathMatch:'full' }, //Default Route //http://localhost:4200/
    { path: 'home', component: HomeComponent },//http://localhost:4200/home
    { path: 'about/:id', component: AboutComponent,canActivate:[AboutGuardService] },//http://localhost:4200/about/101
    { path: 'contact', component: ContactComponent,children:contactRoutes },//http://localhost:4200/contact
    { path: '**', component: NotfoundComponent } //http://localhost:4200/notfound
]

src/app/app.route.module.ts
---------------------------
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { appRoutes } from './app.routes';


@NgModule({
  imports: [RouterModule.forRoot(appRoutes,{useHash:false})],
  exports: [RouterModule],
})
export class AppRouteModule { }


src/app/home/home.component.ts
------------------------------
import { Component } from '@angular/core';

@Component({
  template: `
  <div class="panel panel-default">
  <div class="panel-body">
    <h2>Home Component</h2>
  </div>
</div>
  `,
})
export class HomeComponent {

}

src/app/about/about.component.ts
------------------------------
import { Component } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';

@Component({
  selector: 'app-about',
  template: `
  <div class="panel panel-default">
  <div class="panel-body">
    <h2>About Component</h2>
    <hr>
    <h3>Id = {{ id }}</h3>
    <hr>
    <button class="btn btn-primary" (click)="navigateHome()">Goto Home</button>
  </div>
</div>
  `,
})
export class AboutComponent implements OnInit {

  id: number;

  constructor(public route: ActivatedRoute, public router: Router) {
    this.id = 0;
  }

  ngOnInit(): void {
    this.route.params.subscribe((param) => {
      this.id = parseInt(param['id']);
    });
  }

  navigateHome(): void {
    this.router.navigate(['/home']);
  }
}


src/app/notfound/notfound.component.ts
--------------------------------------
import { Component } from '@angular/core';

@Component({
  template: `
  <div class="panel panel-default">
  <div class="panel-body">
    <h2>Page Not Found</h2>
  </div>
</div>
  `,
})
export class NotfoundComponent {

}

src/app/services/about.guard.service.ts
---------------------------------------
import { Injectable } from "@angular/core";
import { Router, ActivatedRouteSnapshot, RouterStateSnapshot, CanActivate } from "@angular/router";

@Injectable()
export class AboutGuardService implements CanActivate {
    constructor(public router: Router) {

    }

    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {
        console.log(route.params.id);
        console.log(route.url[1].path);

        var data = route.url[1].path;
        var regex = /^\d+$/;

        if (parseInt(data) > 0 && data.match(regex) && !isNaN(parseInt(data))) {

            return true;
        }
        else {
            this.router.navigate(['/home']);
            return false;
        }
    }
}


src/app/contact/contact.component.ts
-------------------------------------
import { Component } from '@angular/core';

@Component({
  template: `
  <div class="panel panel-default">
  <div class="panel-body">
    <h2>Contact Component</h2>
    <hr>
    <ol class="breadcrumb">
    <li>
        <a [routerLink]="[ 'permanent' ]" routerLinkActive="active">Permanent Contact</a>
    </li>
    <li>
        <a [routerLink]="[ 'temporary' ]" routerLinkActive="active">Temporary Contact</a>
    </li>
</ol>
  <div>
    <router-outlet></router-outlet>
  </div>
  </div>
</div>
  `,
})
export class ContactComponent {
}


src/app/contact/contact.module.ts
---------------------------------
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { PermanentComponent } from './permanent.component';
import { TemporaryComponent } from './temporary.component';
import { ContactRouteModule } from './contact.route.module';

@NgModule({
    imports:[CommonModule,ContactRouteModule],
    declarations:[PermanentComponent, TemporaryComponent],
    exports:[CommonModule,ContactRouteModule]
    //bootstrap:[]  /*We cannot use it here */
})
export class ContactModule{

}

src/app/contact/contact.route.module.ts
----------------------------------------
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { contactRoutes } from './contact.routes';

@NgModule({
  imports: [RouterModule.forRoot(contactRoutes)],
  exports: [RouterModule],
})
export class ContactRouteModule { }

src/app/contact/contact.routes.ts
---------------------------------
import { Routes } from '@angular/router';
import { PermanentComponent } from './permanent.component';
import { TemporaryComponent } from './temporary.component';

//Defining the ContactModule Routes
export const contactRoutes: Routes = [
    { path: '', redirectTo: 'permanent', pathMatch: 'full' },
    { path: 'permanent', component: PermanentComponent },
    { path: 'temporary', component: TemporaryComponent },
]

src/app/contact/permanent.component.ts
-------------------------------------
import { Component } from '@angular/core';

@Component({
  template: `
  <div class="panel panel-default">
  <div class="panel-body">
    <h2>Permanent Contact Component</h2>
  </div>
</div>
  `,
})
export class PermanentComponent {

}

src/app/contact/temporary.component.ts
-------------------------------------
import { Component } from '@angular/core';

@Component({
  template: `
  <div class="panel panel-default">
  <div class="panel-body">
    <h2>Temporary Contact Component</h2>
  </div>
</div>
  `,
})
export class TemporaryComponent {

}

Project 10: LifeCycle Hooks
***************************

index.html
----------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Angular</title>
</head>
<body class="container">
    <app-root></app-root>
</body>
</html>

main.ts
-------
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule } from './app.module';

platformBrowserDynamic().bootstrapModule(AppModule);


app.module.ts
--------------
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';
import { AppComponent } from './app/app.component';

import { DemoComponent } from './app/demo-component/demo.component';
import { SampleComponent } from './app/sample-component/sample.component';

@NgModule({
    imports:[ BrowserModule,FormsModule ],
    declarations:[AppComponent, DemoComponent, SampleComponent],
    bootstrap:[AppComponent]
})
export class AppModule{}

app/app.component.ts
--------------------
import { Component } from '@angular/core';

@Component({
    selector: 'app-root',
    templateUrl: './app.component.html'
})
export class AppComponent {
    showStatus:boolean;
    firstName:string;
    lastName:string;

    constructor(){
        this.showStatus =true;
        this.firstName = 'Karthik';
        this.lastName = 'Muthukrishnan';
    }
}


app/app.component.html
--------------------
<div>
    <div class="jumbotron">
        <h1>LifeCycle Hooks</h1>
    </div>
    <div class="panel panel-default">
        <div class="panel-heading">
            <h3 class="panel-title">App Component panel</h3>
        </div>
        <div class="panel-body">
            <div class="well">
                <h2>App Component</h2>
                <hr>
                <button class="btn btn-primary" (click)="showStatus=!showStatus">{{ showStatus?"Hide Demo Component":"Show Demo Component" }}</button>
                <hr>
                <div>
                    <label>First Name</label>
                    <input type="text" class="form-control" [(ngModel)]="firstName"/>
                    <label>Last Name</label>
                    <input type="text" class="form-control" [(ngModel)]="lastName"/>
                </div>
            </div>
            <hr>
            <app-demo *ngIf="showStatus"></app-demo>
            <hr>
            <app-sample [firstName]="firstName" [lastName]="lastName"></app-sample>
        </div>
    </div>
</div>

app/demo/demo.component.ts
---------------------------
import { Component, OnInit, OnDestroy } from "@angular/core";

@Component({
    selector:'app-demo',
    template:`<div class="well">
        <h2>Demo Component</h2>
    </div>`
})
export class DemoComponent implements OnInit, OnDestroy{
    constructor(){
        console.log('DemoComponent Constructor Invoked - Initialize properties');
    }

    ngOnInit():void{
        console.log('DemoComponent OnInit Invoked - XHR Initialization Code goes here');
    }

    ngOnDestroy():void{
        console.log('DemoComponent OnDestroy Invoked - Clean up Code goes here');
    }
}

app/sample/sample.component.ts
--------------------------------
import { Component,OnChanges,SimpleChanges } from "@angular/core";

@Component({
    selector:'app-sample',
    template:`<div class="well">
        <h2>Sample Component</h2>
        <hr>
        <div>
            <span>{{"FirstName: "+firstName+" LastName: "+lastName}}</span>
        </div>
    </div>`,
    inputs:['firstName','lastName']
})
export class SampleComponent implements OnChanges{
    firstName:string;
    lastName:string;

    ngOnChanges(changes: SimpleChanges): void{
        console.log('SampleComponent - OnChanges Invoked : Track the changes of the property in this component');
        console.log(changes);
    }

}


4 More Life Cycle methods
*************************

<app-root>
</app-root>  (4 Life Cycle : OnInit,OnChanges,OnDestroy,DoCheck)

We used component as a View (AfterViewInit - View In the template is initialized,AfterViewChecked - View In the template is done with Change Detection)
template: 
<div>
	<app-inner></app-inner>
</div>


We used component as a Content
template: (AfterContentInit - View Provided as a content In the template is initialized,AfterContentChecked - View Provided as a content In the template is done with Change Detection)
<div>
	<app-inner>
		<app-another></app-another>
	</app-inner>
</div>

Angular Architecture
********************


Base Libraries:

1. shim.js : Polyfill(Subsitute the feature which is missing) Library

2. Zone.js : When the property value changes the View gets updated. It is possible because of Zone js. It updates the view in asynchronous Manner. Zone is used in Change Detection Library

Property value will be changed through
a. User Event (click...)
b. XHR Call (Ajax) 
c. Timers


3. Reflect.js : By default ES2015 does not support this Decorator. Reflect.js provides the feature for Decorators.

4. System : It is used to load the Modules. Module Loader Library Ex: import {} from '@angular/core'

5. RxJS : To support Observables 



Angular Modules created on the top of the above mentioned Libraries

Angular application  = TREE Of Components

Component = Class (properties, Methods) + Template(View) + Metadata(specified in the decorators)
